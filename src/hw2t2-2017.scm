(define (cross-out m)
    ((lambda (r c seq rem)
        (reduce append '() (map (lambda (row)
            (map ((lambda (mr) (lambda (col)
                (map (lambda (mrrow) (rem mrrow col)) mr)
            )) (rem m row)) (seq c))
        ) (seq r)))
    )
        (length m)
        (length (car m))
        (lambda (n) 
            ((lambda (f i res) (f f i res)) (lambda (self i res)
                (if (= i 0) res (self self (- i 1) (cons i res)) )
            ) n '())
        )
        (lambda (l i)
            ((lambda (f l k) (f f l k))
                (lambda (self l k) (if (= k i) (cdr l) (cons (car l) (self self (cdr l) (+ k 1)))))
                l
                1
            )
        )
    )
)